{"version":3,"sources":["components/Game/Game.module.css","typings.ts","models/Player.ts","models/BattleGround.ts","constants.ts","models/Fleet.ts","controllers/fleetHelpers.ts","models/Game.ts","components/Game/Home.tsx","components/Game/GameOver.tsx","components/Game/Placement.tsx","components/Game/Live.tsx","components/Game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","GameMode","CellState","FleetDirection","Player","index","name","this","BattleGround","rows","columns","grid","initGrid","i","row","j","push","EMPTY","length","xPos","yPos","cellState","Fleet","direction","size","xPosition","yPosition","placed","getFleetBlocks","allBlocks","HORIZONTAL","VERTICAL","fleetConfig","sizes","makeFleets","fleets","forEach","config","getSurroundingCoords","width","height","filter","x","y","Game","mode","entities","turn","HOME","player","batteground","styles","require","Home","props","className","homeContainer","gameWelcome","map","_","type","shape","onClick","onModeChange","PLACEMENT","PlayerUpdate","onEntitiesChange","useState","setName","playerNameRow","value","onChange","ev","target","GameOver","winner","reduce","entity","eIndex","every","g","includes","FLEET","e","column","colummId","gridRow","rowId","cx","node","fleet","miss","MISS","hit","HIT","Placement","draggedFleet","setDraggedFleet","handleDrag","columnId","fleetAtGivenCoords","f","fleetDropped","targetFleet","targetXPos","targetYPos","gridWidth","gridHeight","fleetBlocks","flat","coords","concat","targetCoords","hasInvalidTargetCoords","targetx","targety","hasConflictingFleetBlock","canPlaceFleetAtPosition","getLength","getHeight","setPosition","fleetx","fleety","setCellState","haveAllPlayersSetFleets","ship","onDragOver","preventDefault","onDrop","fleetTitle","fleetBlockContainer","fleetBlock","style","draggable","onDragStart","renderFleet","disabled","LIVE","onTurnChange","PREDEFINED_COLORS","Live","opponent","opponentEntity","currentEntity","handleCellClick","setTimeout","some","allFleetsTargeted","OVER","border","padding","myPlayerContainer","indicators","renderContent","GameComponent","gamePage","Content","App","game","setMode","setEntities","setTurn","updateEntities","useCallback","updatedEntities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fba82efc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gamePage\":\"Game_gamePage__b1iBR\",\"homeContainer\":\"Game_homeContainer__1bqPF\",\"gameWelcome\":\"Game_gameWelcome__1uBQh\",\"playerNameRow\":\"Game_playerNameRow__3Y2ex\",\"node\":\"Game_node__JQhqo\",\"gridRow\":\"Game_gridRow__cQDHF\",\"fleetBlock\":\"Game_fleetBlock__1Ycjz\",\"ship\":\"Game_ship__263m2\",\"miss\":\"Game_miss__-56vl\",\"hit\":\"Game_hit__181lF\",\"fleetTitle\":\"Game_fleetTitle__uSrHA\",\"fleetBlockContainer\":\"Game_fleetBlockContainer__1A2GL\",\"myPlayerContainer\":\"Game_myPlayerContainer__3CJt7\",\"indicators\":\"Game_indicators__l2BGE\",\"break\":\"Game_break__1UR1y\"};","export enum GameMode {\n    HOME,\n    PLACEMENT,\n    LIVE,\n    OVER\n}\n\nexport enum CellState {\n    EMPTY,\n    FLEET,\n    HIT,\n    MISS\n}\n\nexport enum FleetDirection {\n    HORIZONTAL,\n    VERTICAL\n}\n\nexport type FleetConfig = {\n    direction: FleetDirection\n    sizes: number[]\n}","export class Player {\n    name: string;\n\n    constructor(index: number) {\n        this.name = \"player_\" + index\n    }\n\n    setName(name: string) {\n        this.name = name\n    }\n}","import { CellState } from \"../typings\";\nimport { DEFAULT_GRID_SIZE } from \"../constants\";\n\nexport class BattleGround {\n    rows: number\n    columns: number\n    grid: CellState[][]\n\n    constructor() {\n        this.rows = DEFAULT_GRID_SIZE\n        this.columns = DEFAULT_GRID_SIZE\n        this.grid = []\n\n        this.initGrid()\n    }\n\n    initGrid() {\n        for (let i = 0; i < this.columns; i++) {\n            const row = []\n            for (let j = 0; j < this.rows; j++) {\n                row.push(CellState.EMPTY)\n            }\n            this.grid.push(row)\n        }\n    }\n\n    getLength() {\n        return this.grid[0].length\n    }\n\n    getHeight() {\n        return this.grid.length\n    }\n\n    setCellState(xPos: number, yPos: number, cellState: CellState) {\n        this.grid[xPos][yPos] = cellState\n    }\n}","export const POSITION_NOT_SET = -1\n\nexport const DEFAULT_GRID_SIZE = 10","import { FleetDirection } from '../typings';\nimport { POSITION_NOT_SET } from '../constants';\n\nexport class Fleet {\n    xPosition: number\n    yPosition: number\n    direction: FleetDirection\n    size: number\n    placed: boolean\n\n    constructor(direction: FleetDirection, size: number) {\n        this.xPosition = POSITION_NOT_SET\n        this.yPosition = POSITION_NOT_SET\n        this.direction = direction\n        this.size = size\n        this.placed = false\n    }\n\n    setPosition(xPosition: number, yPosition: number) {\n        this.xPosition = xPosition\n        this.yPosition = yPosition\n        this.placed = true\n    }\n\n    getFleetBlocks = () => {\n        const mainBlock = [this.xPosition, this.yPosition]\n        const allBlocks = [mainBlock]\n        \n        if (this.direction === FleetDirection.HORIZONTAL) {\n            let i = 0\n            while (i < this.size - 1) {\n                i++\n                allBlocks.push([this.xPosition, this.yPosition+i])\n            }\n        } else if (this.direction === FleetDirection.VERTICAL) {\n            let i = 0\n            while (i < this.size - 1) {\n                i++\n                allBlocks.push([this.xPosition+i, this.yPosition])\n            }\n        }\n    \n        return allBlocks\n    }\n}\n","import { FleetDirection, FleetConfig } from \"../typings\"\nimport { Fleet } from \"../models/Fleet\"\n\nconst fleetConfig: FleetConfig[] = [{\n    direction: FleetDirection.HORIZONTAL,\n    sizes: [1, 2, 3, 4]\n},\n{\n    direction: FleetDirection.VERTICAL,\n    sizes: [1, 2, 3, 4]\n}\n]\n\nexport const makeFleets = (): Fleet[] => {\n    const fleets: Fleet[] = []\n    \n    fleetConfig.forEach(config => {\n        config.sizes.forEach(size => fleets.push(new Fleet(config.direction, size)))\n    })\n\n    return fleets\n}\n\nexport const canPlaceFleetAtPosition = (fleets: Fleet[], targetFleet: Fleet, targetXPos: number, targetYPos: number, gridWidth: number, gridHeight: number): boolean => {\n    if (targetXPos >= gridWidth || targetYPos >= gridHeight) {\n        return false\n    }\n\n    const fleetBlocks = fleets\n        .map(f => getFleetBlocks(f.xPosition, f.yPosition, f.size, f.direction))\n        .filter(f => f.length > 0)\n        .flat()\n        .map(coords => [coords].concat(getSurroundingCoords(coords[0], coords[1], gridWidth, gridHeight)))\n        .flat()\n\n    const targetCoords = getFleetBlocks(targetXPos, targetYPos, targetFleet.size, targetFleet.direction)\n\n    let hasInvalidTargetCoords = false\n    targetCoords.forEach(([targetx, targety]) => {\n        if (targetx >= gridWidth || targety >= gridHeight) {\n            hasInvalidTargetCoords = true\n        }\n    })\n\n    if (hasInvalidTargetCoords) {\n        return false\n    }\n\n    let hasConflictingFleetBlock = false\n    for (let i = 0; i < fleetBlocks.length; i++) {\n        const [xPos, yPos] = fleetBlocks[i]\n\n        targetCoords.forEach(([targetx, targety]) => {\n            if (xPos === targetx && yPos === targety) {\n                hasConflictingFleetBlock = true\n            }\n        })\n    }\n\n    if (hasConflictingFleetBlock) {\n        return false\n    }\n\n    return true\n\n}\n\nexport const getSurroundingCoords = (xPos: number, yPos: number, width: number, height: number): number[][] => {\n    const coords: number[][] = [\n        [xPos, yPos + 1],\n        [xPos, yPos - 1],\n        [xPos + 1, yPos],\n        [xPos - 1, yPos],\n        [xPos + 1, yPos + 1],\n        [xPos - 1, yPos - 1],\n        [xPos + 1, yPos - 1],\n        [xPos - 1, yPos + 1],\n    ]\n\n    return coords.filter(([x, y]) => x >= 0 && y >= 0 && x < width && y < height)\n}\n\nexport const getMatchingFleets = (fleets: Fleet[], xPos: number, yPos : number) =>\n    fleets.filter(f => f.xPosition === xPos && f.yPosition === yPos)\n\nexport const getFleetBlocks = (xPos: number, yPos: number, size: number, direction: FleetDirection) => {\n    const mainBlock = [xPos, yPos]\n    const allBlocks = [mainBlock]\n\n    if (xPos < 0 && yPos < 0) {\n        return []\n    }\n    \n    if (direction === FleetDirection.HORIZONTAL) {\n        let i = 0\n        while (i < size - 1) {\n            allBlocks.push([xPos, yPos+(++i)])\n        }\n    } else if (direction === FleetDirection.VERTICAL) {\n        let i = 0\n        while (i < size - 1) {\n            allBlocks.push([xPos+(++i), yPos])\n        }\n    }\n\n    return allBlocks\n}","import { GameMode } from \"../typings\";\nimport { Player } from \"./Player\";\nimport { BattleGround } from \"./BattleGround\";\nimport { Fleet } from \"./Fleet\";\nimport { makeFleets } from \"../controllers/fleetHelpers\";\n\nexport type GameEntity = {\n    player: Player\n    batteground: BattleGround\n    fleets: Fleet[]\n}\n\nexport class Game {\n    mode: GameMode;\n    entities: GameEntity[]\n    turn: number\n\n    constructor() {\n        this.mode = GameMode.HOME\n        this.turn = 0\n        this.entities = [\n            {player: new Player(1), batteground: new BattleGround(), fleets: makeFleets()},\n            {player: new Player(2), batteground: new BattleGround(), fleets: makeFleets()}\n        ]\n    }\n\n    setGameMode(mode: GameMode) {\n        this.mode = mode\n    }\n\n    setTurn(turn: number) {\n        this.turn = turn\n    }\n}","import { GameProps } from \"./Game\"\nimport { GameMode } from \"../../typings\"\nimport React, { useState } from \"react\"\nimport { Button, Row, Input } from \"antd\"\n\nconst styles = require(\"./Game.module.css\")\n\ntype PlayerUpdateProps = {\n    index: number\n} & GameProps\n\nexport const Home = (props: GameProps) => {\n    const enterGame = () => props.onModeChange(GameMode.PLACEMENT)\n\n    return (\n        <div className={styles.homeContainer}>\n            <div className={styles.gameWelcome}>Welcome to Battlefield</div>\n\n            {props.entities.map((_, i) => <PlayerUpdate key={i} index={i} {...props} />)}\n\n            <Button type=\"primary\" shape=\"round\" size=\"large\" onClick={enterGame}>Enter Game</Button>\n        </div> \n    )\n}\n\nconst PlayerUpdate = ({ entities, onEntitiesChange, index }: PlayerUpdateProps) => {\n    const [name, setName] = useState(entities[index].player.name)\n\n    return (\n        <Row className={styles.playerNameRow}>\n            <span>Player {index + 1} : </span>\n\n            <Input value={name} onChange={ev => {\n                setName(ev.target.value)\n                entities[index].player.name = ev.target.value\n                onEntitiesChange(entities)\n            }} />\n        </Row>\n    )\n}","import { GameProps } from \"./Game\"\nimport { CellState } from \"../../typings\"\nimport React from \"react\"\nimport cx from 'classnames';\n\nconst styles = require(\"./Game.module.css\")\n\nexport const GameOver = (props: GameProps) => {\n    const winner = props.entities.reduce((_, entity, eIndex) => {\n        const won = entity.batteground.grid.every(g => !g.includes(CellState.FLEET))\n        return won ? eIndex : -1\n    }, -1)\n\n    if (winner < 0) {\n        return <>Game Over</>\n    }\n\n    return (\n        <>\n            <p>Game Over, winner is {props.entities[winner].player.name}</p>\n\n            {props.entities.forEach((e, eIndex) => (\n                <div key={eIndex}>\n                    {e.batteground.grid.map((column, colummId) => (\n                        <div key={colummId} className={styles.gridRow}>\n                            {column.map((row, rowId) => (\n                                <div key={rowId} className={cx(styles.node, {\n                                    [styles.fleet]: row === CellState.FLEET,\n                                    [styles.miss]: row === CellState.MISS,\n                                    [styles.hit]: row === CellState.HIT,\n                                })} />\n                            ))}\n                        </div>\n                    ))}\n                </div>\n            ))}\n        </>\n    )\n}","import { GameProps } from \"./Game\"\nimport React, { useState } from \"react\"\nimport { CellState, GameMode, FleetDirection } from \"../../typings\"\nimport { getMatchingFleets, canPlaceFleetAtPosition } from \"../../controllers/fleetHelpers\"\nimport { Button } from \"antd\"\nimport cx from 'classnames';\nimport { Fleet } from \"../../models/Fleet\"\n\nconst styles = require(\"./Game.module.css\")\n\nconst renderFleet = (fleet: Fleet, index: number, setDraggedFleet: Function) => {\n    let height = 30\n    let width = 30\n\n    if (fleet.direction === FleetDirection.HORIZONTAL) {\n        width *= fleet.size\n    } else if (fleet.direction === FleetDirection.VERTICAL) {\n        height *= fleet.size\n    }\n\n    return !fleet.placed ? (\n        <div key={index} className={styles.fleetBlock} style={{height, width}} draggable={true} onDragStart={() => setDraggedFleet(index)} />\n    ) : null\n}\n\nexport const Placement = (props: GameProps) => {\n    const entity = props.entities[props.turn]\n    const grid = entity.batteground.grid\n    const [draggedFleet, setDraggedFleet] = useState(-1)\n\n    const handleDrag = (columnId: number, rowId: number) => {\n        const fleetAtGivenCoords = getMatchingFleets(entity.fleets, columnId, rowId)\n        if (fleetAtGivenCoords && fleetAtGivenCoords.length) {\n            return\n        }\n\n        const fleetDropped = entity.fleets[draggedFleet]\n        const canPlaceFleet = canPlaceFleetAtPosition(\n            entity.fleets,\n            fleetDropped,\n            columnId,\n            rowId,\n            entity.batteground.getLength(),\n            entity.batteground.getHeight()\n        )\n\n        if (!canPlaceFleet) {\n            return\n        }\n\n        fleetDropped.setPosition(columnId, rowId)\n        \n        fleetDropped.getFleetBlocks().forEach(([fleetx, fleety]) =>\n            entity.batteground.setCellState(fleetx, fleety, CellState.FLEET))\n        \n        props.onEntitiesChange(props.entities.map(e => ({...e})))\n    }\n\n    const haveAllPlayersSetFleets = props.turn >= props.entities.length - 1\n\n    return (\n        <>\n            <p>Setting grid for <strong>{entity.player.name}</strong></p>\n\n            {grid.map((column, columnId) => (\n                <div key={columnId} className={styles.gridRow}>\n                    {column.map((row, rowId) => (\n                        <div key={columnId + rowId} className={cx(styles.node, {\n                            [styles.ship]: row === CellState.FLEET,\n                        })} onDragOver={e => e.preventDefault()} onDrop={_ => handleDrag(columnId, rowId)} />\n                    ))}\n                </div>\n            ))}\n\n            <p className={styles.fleetTitle}>Fleets</p>\n            <div className={styles.fleetBlockContainer}>\n                {entity.fleets.map((fleet, index) => renderFleet(fleet, index, setDraggedFleet))}\n            </div>\n\n            {!haveAllPlayersSetFleets ? (\n                <Button type=\"primary\" disabled={!entity.fleets.every(f => f.placed)} onClick={() => props.onTurnChange(1 - props.turn)}>Move to next player</Button>\n            ) : (\n                <Button type=\"primary\" disabled={!entity.fleets.every(f => f.placed)} onClick={() => {\n                    props.onModeChange(GameMode.LIVE)\n                    props.onTurnChange(0)\n                }}>Start Game</Button>\n            )}\n        </>\n    )\n}","import { GameProps } from \"./Game\"\nimport { CellState, GameMode } from \"../../typings\"\nimport React from \"react\"\nimport cx from 'classnames';\n\nconst styles = require(\"./Game.module.css\")\n\nconst PREDEFINED_COLORS = [\"#faad14\", \"#52c41a\"]\n\nexport const Live = (props: GameProps) => {\n    const handleTurnChange = () => props.onTurnChange(1 - props.turn)\n\n    const calculateGameOver = (): boolean => props.entities.some((e) => {\n        let allFleetsTargeted = true\n        e.batteground.grid.forEach((column, _) => {\n            column.forEach((cellState, _) => {\n                if (cellState === CellState.FLEET) {\n                    allFleetsTargeted = false\n                }\n            })\n        })\n        return allFleetsTargeted\n    })\n\n    const opponent = 1 - props.turn\n    const opponentEntity = props.entities[opponent]\n    const grid = opponentEntity.batteground.grid\n    const currentEntity = props.entities[props.turn]\n\n    const handleCellClick = (columnId: number, rowId: number) => {\n        const cellState = grid[columnId][rowId]\n\n        switch (cellState) {\n            case CellState.HIT:\n            case CellState.MISS:\n                return\n            case CellState.FLEET:\n                opponentEntity.batteground.setCellState(columnId, rowId, CellState.HIT)\n                break\n            default:\n                opponentEntity.batteground.setCellState(columnId, rowId, CellState.MISS)\n                break\n        }\n        \n        props.onEntitiesChange(props.entities.map(e => ({...e})))\n\n        setTimeout(() => {\n            const isGameOver = calculateGameOver()\n            if (isGameOver) {\n                props.onModeChange(GameMode.OVER)\n                return\n            }\n            handleTurnChange()\n        }, 500)\n    }\n\n    return (\n        <>\n            <p>Turn for <strong>{currentEntity.player.name}</strong></p>\n            <div style={{ border: `2px solid ${PREDEFINED_COLORS[opponent]}`, padding: \"15px\" }}>\n                {grid.map((column, columnId) => (\n                    <div key={columnId} className={styles.gridRow}>\n                        {column.map((cellState, rowId) => (\n                            <div key={columnId + rowId} className={cx(styles.node, {\n                                [styles.miss]: cellState === CellState.MISS,\n                                [styles.hit]: cellState === CellState.HIT,\n                            })} onClick={() => handleCellClick(columnId, rowId)} />\n                        ))}\n                    </div>\n                ))}\n            </div>\n\n            <div className={styles.myPlayerContainer}>\n                <p>My battleground status</p>\n                {currentEntity.batteground.grid.map((column, columnId) => (\n                    <div key={columnId} className={styles.gridRow}>\n                        {column.map((row, rowId) => (\n                            <div key={\"\" + columnId + rowId} className={cx(styles.node, {\n                                [styles.ship]: row === CellState.FLEET,\n                                [styles.hit]: row === CellState.HIT,\n                                [styles.miss]: row === CellState.MISS,\n                            })} />\n                        ))}\n                    </div>\n                ))}\n            </div>\n\n            <div className={styles.indicators}>\n                <div className={cx(styles.node, styles.ship)} /> Fleet position\n                <div className={cx(styles.node, styles.hit)} /> Correct hit\n                <div className={cx(styles.node, styles.miss)} /> Missed hit\n            </div>\n        </>\n    )\n}","import React from 'react'\nimport { Layout } from 'antd';\nimport { GameEntity } from \"../../models/Game\"\nimport { GameMode } from '../../typings';\nimport { Home } from './Home';\nimport { GameOver } from './GameOver';\nimport { Placement } from './Placement';\nimport { Live } from './Live';\n\nconst styles = require(\"./Game.module.css\")\n\nexport type GameProps = {\n    mode: GameMode;\n    entities: GameEntity[]\n    turn: number\n    onModeChange: (value: GameMode) => void\n    onEntitiesChange: (value: GameEntity[]) => void\n    onTurnChange: (value: number) => void\n}\n\nconst renderContent = (props: GameProps) => {\n    switch (props.mode) {\n        case GameMode.HOME:\n            return <Home {...props} />\n        case GameMode.PLACEMENT:\n            return <Placement {...props} />\n        case GameMode.LIVE:\n            return <Live {...props} />\n        case GameMode.OVER:\n            return <GameOver {...props} />\n    }\n\n    return false\n}\n\nexport const GameComponent = (props: GameProps) => (\n    <Layout className={styles.gamePage}>\n        <Layout.Content>\n            {renderContent(props)}\n        </Layout.Content>\n    </Layout>\n)","import React, { useState, useCallback } from 'react';\nimport { Game, GameEntity } from './models/Game';\nimport { GameComponent } from './components/Game/Game'\n\nimport 'antd/dist/antd.css'; \nimport './App.css';\n\n// TODO: Structure translations across app with i18n\nfunction App() {\n  const game = new Game()\n  const [mode, setMode] = useState(game.mode)\n  const [entities, setEntities] = useState(game.entities)\n  const [turn, setTurn] = useState(game.turn)\n\n  const updateEntities = useCallback((updatedEntities: GameEntity[]) => {\n    setEntities(updatedEntities)\n  }, [])\n  \n  return (\n    <div className=\"App\">\n      <GameComponent\n        mode={mode}\n        entities={entities}\n        turn={turn}\n        onModeChange={setMode}\n        onEntitiesChange={updateEntities}\n        onTurnChange={setTurn}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}